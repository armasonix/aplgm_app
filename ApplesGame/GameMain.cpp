/*
 _____   ___  ___  ___ _____  ___  ___  ___  _____ _   _
|  __ \ / _ \ |  \/  ||  ___| |  \/  | / _ \|_   _| \ | |
| |  \// /_\ \| .  . || |__   | .  . |/ /_\ \ | | |  \| |
| | __ |  _  || |\/| ||  __|  | |\/| ||  _  | | | | . ` |
| |_\ \| | | || |  | || |___  | |  | || | | |_| |_| |\  |
 \____/\_| |_/\_|  |_/\____/  \_|  |_/\_| |_/\___/\_| \_/

Точка входа в игру.

Основной функционал:
- Инициализация главного класса Game
- Запуск основного игрового цикла
- Глобальная обработка исключений

Структура:
1. Создание экземпляра игры в блоке try
2. Вызов game.run() для старта игрового процесса
3. Перехват критических ошибок через catch
4. Возврат кода завершения программы

Особенности реализации:
- Централизованная обработка исключений
- Использование стандартных кодов возврата
*/

#include <iostream>
#include "Game.h"

int main()
{
    try 
    {
        Game game; // Создает экземпляр игры
        game.run(); // Запускает главный цикл
    }
    catch (const std::exception& e)
    {
        // Обработка критических ошибок
        std::cerr << "Fatal Error: " << e.what() << std::endl;
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}