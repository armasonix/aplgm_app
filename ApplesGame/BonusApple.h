/*
______  _____ _   _ _   _ _____    ___  ____________ _      _____
| ___ \|  _  | \ | | | | /  ___|  / _ \ | ___ \ ___ \ |    |  ___|
| |_/ /| | | |  \| | | | \ `--.  / /_\ \| |_/ / |_/ / |    | |__
| ___ \| | | | . ` | | | |`--. \ |  _  ||  __/|  __/| |    |  __|
| |_/ /\ \_/ / |\  | |_| /\__/ / | | | || |   | |   | |____| |___
\____/  \___/\_| \_/\___/\____/  \_| |_/\_|   \_|   \_____/\____/

Класс BonusApple реализует бонусные яблоки с ограниченным временем жизни.

Основной функционал:
- Наследование от Apple с расширенной логикой:
  * Таймер жизни (lifeClock)
  * Анимация мигания (blinkClock)
- Автоматическое обновление состояния через update()
- Проверка истечения времени жизни (isExpired())

Структура:
- Публичные методы:
  * Управление временем жизни (update, isExpired)
- Публичные поля:
  * lifeClock - отслеживает время существования
  * blinkClock - управляет анимацией мигания

Особенности реализации:
- Время жизни задается через Constants.h (BONUS_APPLE_DURATION)
- Мигание реализовано через периодическое изменение видимости
- Наследует всю базовую логику Apple (коллизии, отрисовку)
*/

#pragma once
#include <SFML/System.hpp>
#include "Apple.h"

class BonusApple : public Apple 
{
public:
    sf::Clock lifeClock;
    sf::Clock blinkClock;

    BonusApple();
    void update();
    bool isExpired() const;
};